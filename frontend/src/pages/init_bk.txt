import { IncomingForm } from "formidable";
import fs from "fs";
import { fileTypeFromBuffer } from "file-type";
import mammoth from "mammoth";
import pdfParse from "pdf-parse";
import OpenAI from "openai";

export const config = {
  api: {
    bodyParser: false,
  },
};

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req, res) {
  if (req.method === "POST") {
    const form = new IncomingForm({ keepExtensions: true });

    form.parse(req, async (err, fields, files) => {
      if (err) {
        console.error("‚ùå Erro ao processar o upload:", err);
        return res.status(500).json({ error: "Erro ao processar o upload." });
      }

      const file = files.file;
      const filePath =
        file.filepath || (Array.isArray(file) ? file[0].filepath : null);

      if (!filePath) {
        console.error("‚ùå Arquivo n√£o encontrado.");
        return res.status(400).json({ error: "Arquivo n√£o encontrado." });
      }

      try {
        const buffer = fs.readFileSync(filePath);
        const fileTypeResult = await fileTypeFromBuffer(buffer);
        const fileType = fileTypeResult ? fileTypeResult.ext : "unknown";

        let content = "";
        if (fileType === "pdf") {
          const data = await pdfParse(buffer);
          content = data.text;
        } else if (fileType === "docx") {
          const result = await mammoth.extractRawText({ buffer });
          content = result.value;
        } else {
          console.error("‚ùå Formato de arquivo n√£o suportado.");
          return res
            .status(400)
            .json({ error: "Formato de arquivo n√£o suportado." });
        }

        const prompt = `Voc√™ √© um especialista em contagem de Pontos de Fun√ß√£o (PF) conforme o Manual de Pr√°ticas de Contagem de Pontos de Fun√ß√£o (CPM). Avalie o seguinte conte√∫do:

"""
${content}
"""

Classifique cada fun√ß√£o de acordo com as regras do CPM e calcule o total de Pontos de Fun√ß√£o (PF).

‚úÖ **Retorne o resultado da seguinte forma:**
1. **Fun√ß√µes Identificadas:**
   - Entrada Externa (EE): [Descri√ß√£o] - [Complexidade] - [Pontos]
   - Sa√≠da Externa (SE): [Descri√ß√£o] - [Complexidade] - [Pontos]
   - Consulta Externa (CE): [Descri√ß√£o] - [Complexidade] - [Pontos]
   - Arquivo L√≥gico Interno (ALI): [Descri√ß√£o] - [Complexidade] - [Pontos]
   - Arquivo de Interface Externa (AIE): [Descri√ß√£o] - [Complexidade] - [Pontos]

2. **Total de Pontos de Fun√ß√£o:** [Soma Final]

Seja consistente em suas respostas para o mesmo conte√∫do. N√£o inclua explica√ß√µes adicionais. Forne√ßa um √∫nico resultado final.`;

        try {
          const response = await openai.chat.completions.create({
            //model: "gpt-4",
            model: "gpt-3.5-turbo-0125",
            messages: [{ role: "user", content: prompt }],
            temperature: 0,
            top_p: 0,
            frequency_penalty: 0,
            presence_penalty: 0,
            max_tokens: 1000,
          });

          const messageContent = response.choices[0]?.message?.content.trim();
          console.log("üìã Resposta da API:", messageContent);

          // Ajuste da express√£o regular para capturar o n√∫mero corretamente
          const totalPointsMatch = messageContent.match(
            /Total de Pontos de Fun√ß√£o[^\d]*(\d+)(\s*(PF|Pontos))?/i
          );

          // Adiciona log para verificar o que foi capturado
          console.log(
            "üîç Total de Pontos de Fun√ß√£o encontrado:",
            totalPointsMatch
          );

          const totalPoints = totalPointsMatch
            ? parseInt(totalPointsMatch[1], 10)
            : 0;

          if (totalPoints > 0) {
            return res.status(200).json({
              pontosDeFuncao: totalPoints,
              detalhamento: messageContent,
              reset: true,
            });
          } else {
            console.error("‚ùå Total de Pontos de Fun√ß√£o n√£o identificado.");
            return res.status(400).json({
              error:
                "N√£o foi poss√≠vel identificar o total de Pontos de Fun√ß√£o.",
            });
          }
        } catch (error) {
          console.error(
            "‚ùå Erro ao processar o arquivo e enviar para o OpenAI:",
            error
          );
          return res.status(500).json({
            error: "Erro ao processar o arquivo e enviar para o OpenAI.",
          });
        }
      } catch (error) {
        console.error("‚ùå Erro interno ao processar o arquivo:", error);
        return res
          .status(500)
          .json({ error: "Erro interno ao processar o arquivo." });
      }
    });
  } else {
    res.setHeader("Allow", ["POST"]);
    res.status(405).end(`M√©todo ${req.method} n√£o permitido`);
  }
}
