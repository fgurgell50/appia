"use client";

import { useState, useEffect } from "react";
import { analyzeContent } from "@/services/api";
import styles from "./style.module.scss";
import Header from "@/components/Header";
import Modal from "@/components/Modal"; 

export default function Funcao() {
  //const [inputMode, setInputMode] = useState("upload");
  const [hasAnalyzed, setHasAnalyzed] = useState(false);
  const [inputMode, setInputMode] = useState<string>("upload");

  const [manualText, setManualText] = useState("");
  const [file, setFile] = useState<File | null>(null);
  const [result, setResult] = useState<any>({ functions: [] });
  const [totalPoints, setTotalPoints] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const [currentPrompt, setCurrentPrompt] = useState<string>("");

  useEffect(() => {
    console.log("Estado atualizado:", inputMode);
  }, [inputMode]);
  

  const generatePrompt = (content: string): string => {
    return `
Voc√™ √© um especialista em **An√°lise de Pontos de Fun√ß√£o (APF)** conforme o **Manual de Pr√°ticas de Contagem de Pontos de Fun√ß√£o (CPM - IFPUG)**. Sua tarefa √© avaliar o conte√∫do abaixo e classificar **cada fun√ß√£o identificada**, determinando sua complexidade e calculando o total de Pontos de Fun√ß√£o (PF).

### **Regras da An√°lise**
- A contagem deve ser feita de acordo com os **requisitos funcionais do usu√°rio**.
- Utilize os crit√©rios do CPM para classificar **Entrada Externa (EE), Sa√≠da Externa (SE), Consulta Externa (CE), Arquivo L√≥gico Interno (ALI) e Arquivo de Interface Externa (AIE)**.
- Atribua corretamente a **complexidade (Baixa, M√©dia, Alta)** para cada fun√ß√£o, considerando:
  - **EE, SE e CE**: n√∫mero de Arquivos Referenciados (AR) e Elementos de Dados (DET).
  - **ALI e AIE**: n√∫mero de Registros L√≥gicos Internos (RLI) e Elementos de Dados (DET).

### **Conte√∫do para An√°lise**:
"""
${content}
"""

### **Instru√ß√µes para a Resposta**
1. **Identifique e classifique cada fun√ß√£o**, utilizando o seguinte formato:
   - **Entrada Externa (EE)**: [Descri√ß√£o] - [Complexidade] - [Pontos]
   - **Sa√≠da Externa (SE)**: [Descri√ß√£o] - [Complexidade] - [Pontos]
   - **Consulta Externa (CE)**: [Descri√ß√£o] - [Complexidade] - [Pontos]
   - **Arquivo L√≥gico Interno (ALI)**: [Descri√ß√£o] - [Complexidade] - [Pontos]
   - **Arquivo de Interface Externa (AIE)**: [Descri√ß√£o] - [Complexidade] - [Pontos]

2. **C√°lculo Total**:
   - Some os Pontos de Fun√ß√£o identificados e forne√ßa o **Total de Pontos de Fun√ß√£o (PF)**.

üì¢ **Aten√ß√£o**: Retorne apenas a an√°lise no formato solicitado, sem explica√ß√µes adicionais.`;
  };

  const parseResult = (resultString: string) => {

    const functionsRegex = /\*\*(.*?)\*\*:\s(.*?)\s-\s(.*?)\s-\s(\d+)\sPF/g;
    const functions = [];
    let match;
    
    while ((match = functionsRegex.exec(resultString)) !== null) {
      functions.push({
        type: match[1].trim(),
        description: match[2].trim(),
        complexity: match[3].trim(),
        points: parseInt(match[4], 10),
      });
    }
  
    //console.log("üîç Fun√ß√µes Capturadas:", functions); 
    return { functions };
  };


  const handleOpenModal = () => {
    console.log("Prompt gerado:", generatePrompt(manualText));
    setCurrentPrompt(generatePrompt(manualText));  // Passando o prompt gerado atual para o modal
    setIsModalOpen(true);  // Abre o modal
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);  // Fecha o modal
  };

  const handleSavePrompt = (newPrompt: string) => {
    console.log("üîé Novo Prompt do Modal (antes de enviar para an√°lise):", newPrompt);
    setCurrentPrompt(newPrompt);  // Atualiza o prompt com o novo valor
    setManualText(newPrompt);  // Atualiza o texto manual com o novo prompt
  };


  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      setFile(event.target.files[0]);
    }
  };
  
  
  /*const handleAnalyze = async () => {
    if (inputMode === "upload" && !file) {
      return alert("Por favor, selecione um arquivo.");
    }
    if (inputMode === "text" && !manualText.trim()) {
      return alert("Por favor, insira um texto.");
    }

    setLoading(true);
    const formData = new FormData();
    const content = inputMode === "upload" && file ? "" : manualText;

    console.log("üöÄ Prompt Enviado para An√°lise:", prompt);
    
    formData.append("prompt", generatePrompt(content));
    if (inputMode === "upload" && file) formData.append("file", file);
    if (inputMode === "text") formData.append("text", manualText);

    try {
      const data = await analyzeContent(formData);
      setResult(parseResult(data.result));
      setTotalPoints(data.totalPoints);
    } catch (error) {
      console.error("Erro:", error);
      alert("Erro ao processar a an√°lise.");
    } finally {
      setLoading(false);
    }
  };
*/

const handleAnalyze = async () => {
  if (inputMode === "upload" && !file) {
    return alert("Por favor, selecione um arquivo.");
  }
  if (inputMode === "text" && !manualText.trim()) {
    return alert("Por favor, insira um texto.");
  }

  setLoading(true);
  const formData = new FormData();

  // Verificando se o prompt foi alterado
  const promptToSend = currentPrompt === generatePrompt(manualText) ? generatePrompt(manualText) : currentPrompt;

  console.log("üöÄ Prompt Enviado para An√°lise:", promptToSend);
  
  formData.append("prompt", promptToSend);  // Usar o prompt atualizado, seja o original ou o alterado
  if (inputMode === "upload" && file) formData.append("file", file);
  if (inputMode === "text") formData.append("text", manualText);

  try {
    const data = await analyzeContent(formData);

    console.log("üìå Resposta da API:", data);
    console.log("üìå Resposta da API:", parseResult(data.result));

    setResult(parseResult(data.result));
    setTotalPoints(data.totalPoints);
    setHasAnalyzed(true);
  } catch (error) {
    console.error("Erro:", error);
    alert("Erro ao processar a an√°lise.");
  } finally {
    setLoading(false);
  }
};


   return (
    <>
    <Header />  
    <div className={styles.container}>
      <h1 className={styles.labelHeader}>Contagem de Pontos de Fun√ß√£o</h1>
      <div className={styles.inputGroup}>
        <label className={styles.label}>Escolha uma Op√ß√£o de Envio</label>

        {inputMode === "upload" ? (
  <select
    className={styles.select}
    value="upload"
    onChange={(e) => setInputMode(e.target.value)}
  >
    <option value="upload">Upload de Arquivo</option>
    <option value="text">Inserir Texto Manualmente</option>
  </select>
) : (
  <select
    className={styles.select}
    value={inputMode}
    onChange={(e) => setInputMode(e.target.value)}
  >
    <option value="upload">Upload de Arquivo</option>
    <option value="text">Inserir Texto Manual</option>
  </select>
)}
      </div>

      {inputMode === "upload" ? (
      
      <div className={styles.uploadContainer}>
        <input type="file" id="fileInput" className={styles.fileInput} onChange={handleFileChange} />
        <label htmlFor="fileInput" className={styles.uploadButton}>üìÅ Escolher Arquivo</label>
        {file && <span className={styles.fileName}>{file.name}</span>}
      </div>
        
      ) : (
        <textarea
          className={styles.textarea}
          placeholder="Digite ou cole o texto para an√°lise"
          value={manualText}
          onChange={(e) => setManualText(e.target.value)}
        />
      )}

      <div className={styles.buttonContainer}>

        <button onClick={handleAnalyze} disabled={loading} className={styles.buttonAnalise}>
          {loading ? "Analisando..." : "Enviar para An√°lise"}
        </button>

        <button onClick={handleOpenModal} className={styles.buttonPrompt}>
            Alterar Prompt
        </button>

      </div>

        <Modal 
          isOpen={isModalOpen} 
          onClose={handleCloseModal} 
          onSave={handleSavePrompt} 
          currentPrompt={currentPrompt} 
        />

      {loading && (
        <div className={styles.fullscreenSpinner}>
          <div className={styles.spinner}></div>
          <p>Analisando...</p>
        </div>
      )}

      {result.functions.length > 0 ? (
        <div className={styles.preformattedText}>
          <h3>Fun√ß√µes Identificadas</h3>
          <table className={styles.table}>
            <thead>
              <tr>
                <th>Tipo</th>
                <th>Descri√ß√£o</th>
                <th>Complexidade</th>
                <th>Pontos</th>
              </tr>
            </thead>
            <tbody>
              {result.functions.map((func: any, index: number) => (
                <tr key={index}>
                  <td>{func.type}</td>
                  <td>{func.description}</td>
                  <td>{func.complexity}</td>
                  <td>{func.points}</td>
                </tr>
              ))}
            </tbody>
          </table>
          <h4 className={styles.totalPoints}>Total de Pontos de Fun√ß√£o: {totalPoints} PF</h4>
          </div>
        ) : (
          hasAnalyzed && result.functions.length === 0 && (
          <p className={styles.noResults}>Nenhum resultado encontrado para o prompt enviado.</p>
        )
      )}
      </div>
    </>
  );
}









"use client";

import { useState } from "react";
import { analyzeContent } from "@/services/api";
import styles from "./style.module.scss";
import Header from "@/components/Header";
import Modal from "@/components/Modal"; 

export default function Funcao() {
  const [inputMode, setInputMode] = useState("upload");
  const [manualText, setManualText] = useState("");
  const [file, setFile] = useState<File | null>(null);
  const [result, setResult] = useState<any>(null);
  const [totalPoints, setTotalPoints] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const [currentPrompt, setCurrentPrompt] = useState<string>("");

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      setFile(event.target.files[0]);
    }
  };

  const handleAnalyze = async () => {
    if (inputMode === "upload" && !file) {
      return alert("Por favor, selecione um arquivo.");
    }
    if (inputMode === "text" && !manualText.trim()) {
      return alert("Por favor, insira um texto.");
    }
  
    setLoading(true);
    
    const formData = new FormData();
    
    // Usa o prompt atualizado pelo usu√°rio no modal
    formData.append("prompt", currentPrompt);  
  
    if (inputMode === "upload" && file) {
      const validTypes = [
        "text/plain", 
        "application/pdf", 
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
      ];
    
      if (!validTypes.includes(file.type)) {
        setLoading(false);
        return alert("Formato de arquivo inv√°lido. Use apenas .txt, .pdf ou .docx.");
      }
    
      formData.append("file", file);
    }
  
    try {
      const response = await analyzeContent(formData);
      if (!response || !response.result) {
        throw new Error("Resposta inv√°lida do servidor.");
      }
      setResult(parseResult(response.result));
      setTotalPoints(response.totalPoints);
    } catch (error: any) {
      console.error("Erro na an√°lise:", error);
      let errorMessage = "Erro ao processar a an√°lise.";
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      alert(`Erro ao processar a an√°lise: ${error.message || error}`);
    } finally {
      setLoading(false);
    }
  };
  
  const generatePrompt = (content: string): string => {
    return `
Desenvolva um **plano de testes baseado no TDD (Test-Driven Development)** 
para a hist√≥ria de usu√°rio que foi encaminhada considerando as funcionalidades, regras de neg√≥cio, 
regras de interfaces, regras de sistemas e crit√©rios de aceite. O plano de testes deve incluir:

### 1. Estrutura do Plano de Testes
- **Cen√°rios de Teste**: Definir os principais cen√°rios com base na funcionalidade descrita.
- **Casos de Teste**: Para cada cen√°rio, incluir:
  - **ID do Caso de Teste**
  - **Descri√ß√£o do Caso de Teste**
  - **Pr√©-condi√ß√µes**
  - **Passos**
  - **Resultado Esperado**
- **Mapeamento com Requisitos**: Relacionar regras de neg√≥cio e crit√©rios de aceite.
- **Valida√ß√µes de Interface**: Testes para mensagens e bot√µes de navega√ß√£o.
- **Testes Negativos e de Erro**: Testar entradas inv√°lidas e cen√°rios de erro.
- **Testes de Integra√ß√£o**: Comunica√ß√£o com **APIs, banco de dados e sistemas externos**.

### 2. Conte√∫do para an√°lise
"""
${content}
"""

Retorne o plano de testes estruturado, considerando as melhores pr√°ticas do TDD.`;
  };

  const parseResult = (resultString: string) => {
    return { text: resultString };
  };

  /*
  const handleOpenModal = () => {
    console.log("Prompt gerado:", generatePrompt(manualText));
    setCurrentPrompt(generatePrompt(manualText));  // Passando o prompt gerado atual para o modal
    setIsModalOpen(true);  // Abre o modal
  };
  */

  const handleOpenModal = () => {
    const content = inputMode === "upload" && file ? "Arquivo selecionado: " + file.name : manualText;
    const generatedPrompt = generatePrompt(content);
    console.log("Prompt gerado:", generatedPrompt);
    setCurrentPrompt(generatedPrompt);
    setIsModalOpen(true);
  };
  
  const handleCloseModal = () => {
    setIsModalOpen(false);  // Fecha o modal
  };

  const handleSavePrompt = (newPrompt: string) => {
    console.log("üîé Novo Prompt do Modal (antes de enviar para an√°lise):", newPrompt);
    setCurrentPrompt(newPrompt);  // Atualiza o prompt com o novo valor
    setManualText(newPrompt);  // Atualiza o texto manual com o novo prompt
  };


  return (
    <>
    <Header />  
    <div className={styles.container}>
      <h1 className={styles.labelHeader}>Plano de Testes</h1>
      <div className={styles.inputGroup}>
        <label className={styles.label}>Escolha uma Op√ß√£o de Envio</label>
        <select 
          className={styles.select} 
          value={inputMode} 
          onChange={(e) => setInputMode(e.target.value)}>
          <option value="upload">Upload de Arquivo</option>
          <option value="text">Inserir Texto Manual</option>
        </select>
      </div>

      {inputMode === "upload" ? (

      <div className={styles.uploadContainer}>
        <input type="file" id="fileInput" className={styles.fileInput} onChange={handleFileChange} />
        <label htmlFor="fileInput" className={styles.uploadButton}>üìÅ Escolher Arquivo</label>
        {file && <span className={styles.fileName}>{file.name}</span>}
      </div>

       
      ) : (
        <textarea
          className={styles.textarea}
          placeholder="Digite ou cole o texto para an√°lise"
          value={manualText}
          onChange={(e) => setManualText(e.target.value)}
        />
      )}
      
      <div className={styles.buttonContainer}>

        <button onClick={handleAnalyze} disabled={loading} className={styles.buttonAnalise}>
          {loading ? "Analisando..." : "Enviar para An√°lise"}
        </button>

        <button onClick={handleOpenModal} className={styles.buttonPrompt}>
            Alterar Prompt
        </button>

      </div>


        <Modal 
          isOpen={isModalOpen} 
          onClose={handleCloseModal} 
          onSave={handleSavePrompt} 
          currentPrompt={currentPrompt} 
        />

      {loading && (
        <div className={styles.fullscreenSpinner}>
          <div className={styles.spinner}></div>
          <p>Aguarde, analisando...</p>
        </div>
      )}


      {result && (
        <div className={styles.result}>
          <h3>Plano de Testes Gerado</h3>
          <pre className={styles.preformattedText}>{result.text}</pre>
        </div>
      )}
    </div>
    </>
  );
}
